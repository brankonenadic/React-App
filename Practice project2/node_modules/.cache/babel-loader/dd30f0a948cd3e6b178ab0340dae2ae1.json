{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\brankonenadic\\\\github\\\\React-App\\\\Practice project2\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst deafultCartStae = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updateTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => {\n      item.id === action.item.id;\n    });\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updateItems;\n\n    if (existingCartItem) {\n      const updateItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updateItems = [...state.items];\n      updateItems[existingCartItemIndex] = updateItem;\n    } else {\n      updateItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updateItems,\n      totalAmount: updateTotalAmount\n    };\n  }\n\n  return deafultCartStae;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispachCart] = useReducer(cartReducer, deafultCartStae);\n\n  const addItemToCartToHandler = item => {\n    dispachCart({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispachCart({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartToHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"uFEuRFPf8CN/PC7RZNxNMsHga9o=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/xampp/htdocs/brankonenadic/github/React-App/Practice project2/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","deafultCartStae","items","totalAmount","cartReducer","state","action","type","updateTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updateItems","updateItem","concat","CartProvider","props","cartState","dispachCart","addItemToCartToHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,WAAW,EAAE;AAFO,CAAxB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAASC,MAAT,KAAoB;AACpC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AAEvB,UAAMC,iBAAiB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA9E;AAEA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAuBJ,IAAD,IAAU;AAACA,MAAAA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAAxB;AAA2B,KAA5D,CAA9B;AACA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB;AAEA,QAAII,WAAJ;;AACA,QAAKD,gBAAL,EAAuB;AACpB,YAAME,UAAU,GAAG,EACd,GAAGF,gBADW;AAEdJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE;AAFhC,OAAnB;AAICK,MAAAA,WAAW,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAd;AACAc,MAAAA,WAAW,CAACJ,qBAAD,CAAX,GAAqCK,UAArC;AACH,KAPD,MAOO;AACHD,MAAAA,WAAW,GAAGX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAd;AACH;;AAED,WAAO;AACHP,MAAAA,KAAK,EAAEc,WADJ;AAEHb,MAAAA,WAAW,EAAEK;AAFV,KAAP;AAIH;;AACD,SAAOP,eAAP;AACH,CA1BD;;AA4BA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAaC,WAAb,IAA4BvB,UAAU,CAACK,WAAD,EAAcH,eAAd,CAA5C;;AACC,QAAMsB,sBAAsB,GAAId,IAAD,IAAU;AACrCa,IAAAA,WAAW,CAAC;AAACf,MAAAA,IAAI,EAAE,KAAP;AAAcE,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAX;AACH,GAFD;;AAGA,QAAMe,yBAAyB,GAAIV,EAAD,IAAQ;AACtCQ,IAAAA,WAAW,CAAC;AAACf,MAAAA,IAAI,EAAE,QAAP;AAAiBO,MAAAA,EAAE,EAAEA;AAArB,KAAD,CAAX;AACH,GAFD;;AAGA,QAAMW,WAAW,GAAG;AAChBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADD;AAEhBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFP;AAGhBuB,IAAAA,OAAO,EAAEH,sBAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAApB;AAMA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACKL,KAAK,CAACQ;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAnBD;;GAAMT,Y;;KAAAA,Y;AAqBN,eAAeA,YAAf","sourcesContent":["import React from 'react'\r\nimport { useReducer } from 'react'\r\nimport CartContext from './cart-context'\r\n\r\nconst deafultCartStae = {\r\n    items: [],\r\n    totalAmount: 0\r\n}\r\n\r\nconst cartReducer = (state , action) => {\r\n    if (action.type === 'ADD') {\r\n       \r\n        const updateTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n\r\n        const existingCartItemIndex = state.items.findIndex((item) => {item.id === action.item.id});\r\n        const existingCartItem = state.items[existingCartItemIndex];\r\n        \r\n        let updateItems;\r\n        if ( existingCartItem) {\r\n           const updateItem = {\r\n                ...existingCartItem,\r\n                amount: existingCartItem.amount + action.item.amount\r\n            };\r\n            updateItems = [...state.items];\r\n            updateItems[existingCartItemIndex] = updateItem;\r\n        } else {\r\n            updateItems = state.items.concat(action.item);\r\n        }\r\n\r\n        return {\r\n            items: updateItems,\r\n            totalAmount: updateTotalAmount\r\n        };\r\n    }\r\n    return deafultCartStae;\r\n}\r\n\r\nconst CartProvider = (props) => {\r\n   const [cartState , dispachCart] = useReducer(cartReducer, deafultCartStae);\r\n    const addItemToCartToHandler = (item) => {\r\n        dispachCart({type: 'ADD', item: item});\r\n    }\r\n    const removeItemFromCartHandler = (id) => {\r\n        dispachCart({type: 'REMOVE', id: id});\r\n    }\r\n    const cartContext = {\r\n        items: cartState.items,\r\n        totalAmount: cartState.totalAmount,\r\n        addItem: addItemToCartToHandler,\r\n        removeItem: removeItemFromCartHandler\r\n    }\r\n    return (\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CartProvider\r\n"]},"metadata":{},"sourceType":"module"}