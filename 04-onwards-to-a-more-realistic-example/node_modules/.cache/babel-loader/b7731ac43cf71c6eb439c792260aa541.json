{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfing, applayData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfing.url, {\n        method: requestConfing.method ? requestConfing.method : 'GET',\n        headers: requestConfing.headers ? requestConfing.method : {},\n        body: requestConfing.body ? JSON.stringify(requestConfing.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applayData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/xampp/htdocs/brankonenadic/github/React-App/04-onwards-to-a-more-realistic-example/src/hooks/http-request.js"],"names":["useCallback","useState","useHttp","isLoading","setIsLoading","error","setError","sendRequest","requestConfing","applayData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAAQA,WAAR,EAAqBC,QAArB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAGA,QAAMM,WAAW,GAAGP,WAAW,CAAE,OAAOQ,cAAP,EAAuBC,UAAvB,KAAsC;AACrEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAC1BH,cAAc,CAACI,GADW,EACN;AAClBC,QAAAA,MAAM,EAAEL,cAAc,CAACK,MAAf,GAAwBL,cAAc,CAACK,MAAvC,GAAgD,KADtC;AAElBC,QAAAA,OAAO,EAAEN,cAAc,CAACM,OAAf,GAAyBN,cAAc,CAACK,MAAxC,GAAiD,EAFxC;AAGlBE,QAAAA,IAAI,EAAEP,cAAc,CAACO,IAAf,GAAsBC,IAAI,CAACC,SAAL,CAAeT,cAAc,CAACO,IAA9B,CAAtB,GAA4D;AAHhD,OADM,CAA5B;;AAMA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAZ,MAAAA,UAAU,CAACW,IAAD,CAAV;AAED,KAdD,CAcE,OAAOE,GAAP,EAAY;AACZhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArB8B,EAqB5B,EArB4B,CAA/B;AAuBF,SAAO;AACLD,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAjCD;;GAAML,O;;AAmCN,eAAeA,OAAf","sourcesContent":["import {useCallback, useState} from 'react'\r\n\r\nconst useHttp = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n  \r\n  \r\n    const sendRequest = useCallback( async (requestConfing, applayData) => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(\r\n          requestConfing.url, {\r\n            method: requestConfing.method ? requestConfing.method : 'GET',\r\n            headers: requestConfing.headers ? requestConfing.method : {},\r\n            body: requestConfing.body ? JSON.stringify(requestConfing.body) : null,\r\n          });\r\n        if (!response.ok) {\r\n          throw new Error('Request failed!');\r\n        }\r\n  \r\n        const data = await response.json();\r\n        applayData(data);\r\n \r\n      } catch (err) {\r\n        setError(err.message || 'Something went wrong!');\r\n      }\r\n      setIsLoading(false);\r\n    }, []);\r\n\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest\r\n  };\r\n}\r\n\r\nexport default useHttp\r\n"]},"metadata":{},"sourceType":"module"}