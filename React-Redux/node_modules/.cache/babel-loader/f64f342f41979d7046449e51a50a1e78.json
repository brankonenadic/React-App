{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst currentState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  inicurrentState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    incrementes(state) {\n      state.counter--;\n    },\n\n    decrement(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggle(state) {\n      state.counter = !state.counter;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;\n/* import { createStore } from 'redux';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst currentState = {counter: 0, showCounter: true};\r\n\r\nconst counterReducer = (state = currentState, action) => {\r\n    if (action.type === 'increment') {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n  if (action.type === 'incrementes') {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n    if (action.type === 'decrement') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter: state.showCounter\r\n        };\r\n    }\r\n    if (action.type === 'toggle') {\r\n      return {\r\n        counter: state.counter,\r\n        showCounter: !state.showCounter\r\n       };\r\n    }\r\n    return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store; */","map":{"version":3,"sources":["C:/xampp/htdocs/brankonenadic/github/React-App/React-Redux/src/store/index.js"],"names":["createSlice","configureStore","currentState","counter","showCounter","counterSlice","name","inicurrentState","reducers","increment","state","incrementes","decrement","action","payload","toggle","store","reducer","counterActions","actions"],"mappings":"AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAG;AAACC,EAAAA,OAAO,EAAE,CAAV;AAAaC,EAAAA,WAAW,EAAE;AAA1B,CAArB;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,eAF+B;AAG/BC,EAAAA,QAAQ,EAAC;AACPC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KAHM;;AAIPQ,IAAAA,WAAW,CAACD,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACP,OAAN;AACD,KANM;;AAOPS,IAAAA,SAAS,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACvBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AACD,KATM;;AAUPC,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACP,OAAN,GAAgB,CAACO,KAAK,CAACP,OAAvB;AACD;;AAZM;AAHsB,CAAD,CAAhC;AAmBA,MAAMa,KAAK,GAAGf,cAAc,CAAC;AAC3BgB,EAAAA,OAAO,EAAEZ,YAAY,CAACY;AADK,CAAD,CAA5B;AAGA,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAApC;AACP,eAAeH,KAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\nconst currentState = {counter: 0, showCounter: true};\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  inicurrentState,\r\n  reducers:{\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    incrementes(state) {\r\n      state.counter--;\r\n    },\r\n    decrement(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    toggle(state) {\r\n      state.counter = !state.counter;\r\n    }\r\n  }\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer\r\n});\r\nexport const counterActions = counterSlice.actions;\r\nexport default store;\r\n\r\n/* import { createStore } from 'redux';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst currentState = {counter: 0, showCounter: true};\r\n\r\nconst counterReducer = (state = currentState, action) => {\r\n    if (action.type === 'increment') {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n  if (action.type === 'incrementes') {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n    if (action.type === 'decrement') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter: state.showCounter\r\n        };\r\n    }\r\n    if (action.type === 'toggle') {\r\n      return {\r\n        counter: state.counter,\r\n        showCounter: !state.showCounter\r\n       };\r\n    }\r\n    return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store; */"]},"metadata":{},"sourceType":"module"}