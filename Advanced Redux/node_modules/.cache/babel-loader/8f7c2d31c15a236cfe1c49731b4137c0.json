{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./uiSlice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quntity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quntity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quntity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quntity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const fetchCartDate = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch('https://food-order-3594b-default-rtdb.europe-west1.firebasedatabase.app/cart.json');\n\n      if (!response.ok) {\n        throw new Error('Fetch data falied\"');\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.re);\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error',\n        message: 'Fetching cart data failed!'\n      }));\n    }\n  };\n};\nexport const sendCrtData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://food-order-3594b-default-rtdb.europe-west1.firebasedatabase.app/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed!');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'SUccess',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["C:/xampp/htdocs/brankonenadic/github/React-App/Advanced Redux/src/store/cartSlice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quntity","totalPrice","title","removeItemFromCart","filter","fetchCartDate","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","cartActions","re","error","showNotification","status","message","sendCrtData","cart","sendRequest","method","body","JSON","stringify","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./uiSlice\";\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        items: [],\r\n        totalQuantity: 0,\r\n    },\r\n    reducers: {\r\n        replaceCart(state, action) {\r\n            state.totalQuantity = action.payload.totalQuantity;\r\n            state.items = action.payload.items;\r\n        },\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find(item => item.id === newItem.id);\r\n            state.totalQuantity++;\r\n            if (!existingItem) {\r\n                state.items.push({\r\n                    id: newItem.id,\r\n                    price: newItem.price,\r\n                    quntity: 1,\r\n                    totalPrice: newItem.price,\r\n                    name: newItem.title\r\n                });\r\n            } else {\r\n                existingItem.quntity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            state.totalQuantity--;\r\n            if (existingItem.quntity === 1) {\r\n                state.items = state.items.filter(item => item.id !== id);\r\n            } else {\r\n                existingItem.quntity--;\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n            }\r\n        },\r\n    }\r\n});\r\n\r\nexport const fetchCartDate = () => {\r\n    return async (dispatch) => {\r\n        const fetchData = async () => {\r\n            const response = await fetch('https://food-order-3594b-default-rtdb.europe-west1.firebasedatabase.app/cart.json');\r\n            if (!response.ok) {\r\n                throw new Error('Fetch data falied\"');\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        };\r\n        try {\r\n         const cartData = await fetchData();\r\n         dispatch(cartActions.re);\r\n        } catch (error) {\r\n            dispatch(uiActions.showNotification({\r\n                status: 'error',\r\n                title: 'Error',\r\n                message: 'Fetching cart data failed!'\r\n            }));\r\n        }\r\n    };\r\n};\r\n\r\nexport const sendCrtData = (cart) => {\r\n    return async (dispatch) => {\r\n        dispatch(uiActions.showNotification({\r\n            status: 'pending',\r\n            title: 'Sending...',\r\n            message: 'Sending cart data'\r\n        }));\r\n        const sendRequest = async () => {\r\n            const response = await fetch('https://food-order-3594b-default-rtdb.europe-west1.firebasedatabase.app/cart.json', { method: 'PUT', body: JSON.stringify(cart) });\r\n            if (!response.ok) {\r\n                throw new Error('Sending cart data failed!');\r\n            }\r\n        };\r\n\r\n        try {\r\n            await sendRequest();\r\n            dispatch(uiActions.showNotification({\r\n                status: 'success',\r\n                title: 'SUccess',\r\n                message: 'Sent cart data successfully!'\r\n            }));\r\n        } catch (error) {\r\n\r\n            dispatch(uiActions.showNotification({\r\n                status: 'error',\r\n                title: 'Error',\r\n                message: 'Sending cart data failed!'\r\n            }));\r\n        }\r\n\r\n    };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}