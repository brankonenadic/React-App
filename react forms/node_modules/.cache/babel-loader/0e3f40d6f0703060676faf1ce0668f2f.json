{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputValue, setInputValue] = useState();\n  const [inputThached, setInputThched] = useState(false);\n  const inputIsValid = validateValue(inputValue);\n  const hasError = !inputIsValid && inputThached;\n\n  const inputHandler = e => {\n    setInputValue(e.target.value);\n  };\n\n  const inputBlurHandler = () => {\n    setInputThched(true);\n  };\n\n  const reset = () => {};\n\n  return {\n    value: inputValue,\n    hasError,\n    isValid: inputIsValid,\n    inputHandler,\n    inputBlurHandler\n  };\n};\n\n_s(useInput, \"A3LOkO6itzDDKwOXzxa9Uy/J0Z4=\");\n\nexport default useInput;","map":{"version":3,"sources":["C:/xampp/htdocs/brankonenadic/github/React-App/react forms/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","inputValue","setInputValue","inputThached","setInputThched","inputIsValid","hasError","inputHandler","e","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,EAA5C;AACA,QAAM,CAACK,YAAD,EAAeC,cAAf,IAAiCN,QAAQ,CAAC,KAAD,CAA/C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,UAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,YAAlC;;AAEA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AACxBN,IAAAA,aAAa,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AAEH,GAHD;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAC3BP,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAFD;;AAGA,QAAMQ,KAAK,GAAG,MAAM,CAEnB,CAFD;;AAGI,SAAO;AACHF,IAAAA,KAAK,EAAET,UADJ;AAEFK,IAAAA,QAFE;AAGFO,IAAAA,OAAO,EAAER,YAHP;AAIFE,IAAAA,YAJE;AAKFI,IAAAA;AALE,GAAP;AAOH,CAxBD;;GAAMZ,Q;;AA0BN,eAAeA,QAAf","sourcesContent":["import {useState} from 'react'\r\n\r\nconst useInput = (validateValue) => {\r\nconst [inputValue, setInputValue] = useState();\r\nconst [inputThached, setInputThched] = useState(false);\r\n\r\nconst inputIsValid = validateValue(inputValue);\r\nconst hasError = !inputIsValid && inputThached;\r\n\r\nconst inputHandler = (e) => {\r\n    setInputValue(e.target.value);\r\n    \r\n}\r\nconst inputBlurHandler = () => {\r\n    setInputThched(true);\r\n}\r\nconst reset = () => {\r\n    \r\n}\r\n    return {\r\n        value: inputValue,\r\n         hasError, \r\n         isValid: inputIsValid, \r\n         inputHandler,\r\n         inputBlurHandler\r\n    }\r\n}\r\n\r\nexport default useInput\r\n"]},"metadata":{},"sourceType":"module"}