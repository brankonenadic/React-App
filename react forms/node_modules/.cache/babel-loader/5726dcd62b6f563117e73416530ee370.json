{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\brankonenadic\\\\github\\\\React-App\\\\react forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputError,\n    isValid: nameInputIsValid,\n    inputHandler: nameInputHandler,\n    reset: nameInputReset,\n    inputBlurHandler: nameInputBlurHandler\n  } = useInput(value => value.trim() !== '');\n  const {} = useInput();\n  const [enteredEmailInput, setEnteredEmailInput] = useState('');\n  const [inputEmailTuched, setInputEmailTuched] = useState(false); // const regName = /^[A-žÀ-ÿš ]+$/;\n\n  const regEmail = /^[a-z]+[0-9a-zA-Z_.]*@[a-z_]+.[a-z]+$/;\n  const enteredEmailIsValid = enteredEmailInput.trim() !== '' && regEmail.test(enteredEmailInput);\n  const emailInputIsValid = !enteredEmailIsValid && inputEmailTuched;\n  let formIsValid = false;\n\n  if (nameInputIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const enteredEmailInputHandler = e => {\n    setEnteredEmailInput(e.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setInputEmailTuched(true);\n  };\n\n  const formSubmitHandler = e => {\n    e.preventDefault();\n    setInputEmailTuched(true);\n\n    if (!nameInputError && !enteredEmailIsValid) {\n      formIsValid = false;\n    }\n\n    console.log(enteredName);\n    console.log(enteredEmailInput);\n    nameInputReset();\n    setEnteredEmailInput('');\n    setInputEmailTuched(false);\n  };\n\n  const inputNameClass = !nameInputError ? 'form-control' : 'form-control invalid';\n  const inputEmailClass = !emailInputIsValid ? 'form-control' : 'form-control invalid';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputNameClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), nameInputError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Enter Valid Name !!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputEmailClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: enteredEmailInputHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmailInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), emailInputIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Enter Valid Email !!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SimpleInput, \"ENLxhskXeCtKVcEDgAltUsN0FBk=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n/* import { useRef, useState } from 'react'\r\n\r\nconst SimpleInput = (props) => {\r\n    const inputRef = useRef();\r\n    const [enteredNameInput, setEnteredNameInput] = useState('');\r\n    const [inputIsValid, setInputIsValid] = useState(true);\r\n\r\n    const enteredNameInputHandler = (e) => {\r\n        setEnteredNameInput(e.target.value);\r\n        setInputIsValid(true);\r\n    }\r\n    const formSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        if (enteredNameInput.trim() === '') {\r\n            setInputIsValid(false);\r\n            return;\r\n        }\r\n        setInputIsValid(true);\r\n        console.log(enteredNameInput);\r\n        console.log(inputRef.current.value);\r\n        setEnteredNameInput('');\r\n\r\n    }\r\n    const inputClass = inputIsValid ? 'form-control' : 'form-control invalid';\r\n    return (\r\n        <form onSubmit={formSubmitHandler}>\r\n            <div className={inputClass}>\r\n                <label htmlFor='name'>Your Name</label>\r\n                <input ref={inputRef} type='text' id='name' onChange={enteredNameInputHandler} value={enteredNameInput} />\r\n            </div>\r\n            {!inputIsValid && <p className='error-text'>Enter Your name !!!</p>}\r\n            <div className=\"form-actions\">\r\n                <button>Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SimpleInput; */\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/xampp/htdocs/brankonenadic/github/React-App/react forms/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputError","isValid","nameInputIsValid","inputHandler","nameInputHandler","reset","nameInputReset","inputBlurHandler","nameInputBlurHandler","trim","enteredEmailInput","setEnteredEmailInput","inputEmailTuched","setInputEmailTuched","regEmail","enteredEmailIsValid","test","emailInputIsValid","formIsValid","enteredEmailInputHandler","e","target","emailInputBlurHandler","formSubmitHandler","preventDefault","console","log","inputNameClass","inputEmailClass"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport useInput from '../hooks/use-input';\r\n\r\nconst SimpleInput = (props) => {\r\n\r\n    const { value: enteredName,\r\n        hasError: nameInputError,\r\n        isValid: nameInputIsValid,\r\n        inputHandler: nameInputHandler,\r\n        reset: nameInputReset,\r\n        inputBlurHandler: nameInputBlurHandler } = useInput(value => value.trim() !== '');\r\nconst {} = useInput()\r\n    const [enteredEmailInput, setEnteredEmailInput] = useState('');\r\n\r\n    const [inputEmailTuched, setInputEmailTuched] = useState(false);\r\n\r\n    // const regName = /^[A-žÀ-ÿš ]+$/;\r\n    const regEmail = /^[a-z]+[0-9a-zA-Z_.]*@[a-z_]+.[a-z]+$/;\r\n\r\n    const enteredEmailIsValid = enteredEmailInput.trim() !== '' && regEmail.test(enteredEmailInput);\r\n\r\n    const emailInputIsValid = !enteredEmailIsValid && inputEmailTuched;\r\n\r\n\r\n    let formIsValid = false;\r\n\r\n    if (nameInputIsValid && enteredEmailIsValid) {\r\n        formIsValid = true;\r\n    }\r\n\r\n\r\n    const enteredEmailInputHandler = (e) => {\r\n        setEnteredEmailInput(e.target.value);\r\n\r\n    }\r\n\r\n    const emailInputBlurHandler = () => {\r\n        setInputEmailTuched(true);\r\n    }\r\n    const formSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        setInputEmailTuched(true);\r\n        if (!nameInputError && !enteredEmailIsValid) {\r\n            formIsValid = false;\r\n\r\n        }\r\n\r\n        console.log(enteredName);\r\n        console.log(enteredEmailInput);\r\n        nameInputReset();\r\n        setEnteredEmailInput('');\r\n        setInputEmailTuched(false);\r\n    }\r\n    const inputNameClass = !nameInputError ? 'form-control' : 'form-control invalid';\r\n    const inputEmailClass = !emailInputIsValid ? 'form-control' : 'form-control invalid';\r\n    return (\r\n        <form onSubmit={formSubmitHandler}>\r\n            <div className={inputNameClass}>\r\n                <label htmlFor='name'>Your Name</label>\r\n                <input type='text' id='name' onChange={nameInputHandler}\r\n                    onBlur={nameInputBlurHandler} value={enteredName} />\r\n            </div>\r\n            {nameInputError && <p className='error-text'>Enter Valid Name !!!</p>}\r\n            <div className={inputEmailClass}>\r\n                <label htmlFor='email'>Your Email</label>\r\n                <input type='email' id='email' onChange={enteredEmailInputHandler}\r\n                    onBlur={emailInputBlurHandler} value={enteredEmailInput} />\r\n            </div>\r\n            {emailInputIsValid && <p className='error-text'>Enter Valid Email !!!</p>}\r\n            <div className=\"form-actions\">\r\n                <button disabled={!formIsValid}>Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SimpleInput;\r\n\r\n\r\n\r\n/* import { useRef, useState } from 'react'\r\n\r\nconst SimpleInput = (props) => {\r\n    const inputRef = useRef();\r\n    const [enteredNameInput, setEnteredNameInput] = useState('');\r\n    const [inputIsValid, setInputIsValid] = useState(true);\r\n\r\n    const enteredNameInputHandler = (e) => {\r\n        setEnteredNameInput(e.target.value);\r\n        setInputIsValid(true);\r\n    }\r\n    const formSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        if (enteredNameInput.trim() === '') {\r\n            setInputIsValid(false);\r\n            return;\r\n        }\r\n        setInputIsValid(true);\r\n        console.log(enteredNameInput);\r\n        console.log(inputRef.current.value);\r\n        setEnteredNameInput('');\r\n\r\n    }\r\n    const inputClass = inputIsValid ? 'form-control' : 'form-control invalid';\r\n    return (\r\n        <form onSubmit={formSubmitHandler}>\r\n            <div className={inputClass}>\r\n                <label htmlFor='name'>Your Name</label>\r\n                <input ref={inputRef} type='text' id='name' onChange={enteredNameInputHandler} value={enteredNameInput} />\r\n            </div>\r\n            {!inputIsValid && <p className='error-text'>Enter Your name !!!</p>}\r\n            <div className=\"form-actions\">\r\n                <button>Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SimpleInput; */\r\n"]},"metadata":{},"sourceType":"module"}